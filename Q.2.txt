In JavaScript, objects are one of the fundamental data types and are used to store collections of key-value pairs. 
Each key in an object is a string (or a symbol), and each value can be any data type, including other objects. Objects in
JavaScript can be created using object literal syntax, constructor functions, or the class keyword introduced in 
ECMAScript 2015 (ES6).

Internally, objects in JavaScript are typically implemented as hash tables. Hash tables are data structures that allow for
efficient retrieval, insertion, and deletion of key-value pairs. When you create an object in JavaScript, the properties of 
the object are stored as key-value pairs in the object's hash table.

When you access a property of an object in JavaScript using dot notation (e.g., object.property) or bracket notation (e.g., object['property']), 
the JavaScript engine looks up the property in the object's hash table using the property name as the key. If the property is found,
the corresponding value is returned; otherwise, undefined is returned.

It's important to note that JavaScript objects are mutable, which means that you can change their properties after they are created. 
This mutability allows you to add, update, or remove properties from an object dynamically.

In addition to regular objects, JavaScript also has built-in objects like arrays, functions, and dates, which are specialized types 
of objects with additional behaviors and properties. These built-in objects have their own internal representations and may have 
optimized implementations for specific use cases.

Objects are complex and each object may contain a combination of primitive data-types as well as reference data-types.
An object is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value.
That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.

Otherway around, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, 
in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in 
the context of an object.An object can be created with figure brackets {} with an optional list of properties. A property is a 
“key: value” pair, where a key is the property name value can be anything.